{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11842491,"sourceType":"datasetVersion","datasetId":7440518}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# B√ÄI T·∫¨P M√îN DATA MINING\n* **ƒê·ªÅ b√†i: Kh·∫£o s√°t v√† ph√¢n t√≠ch b·ªô d·ªØ li·ªáu employee_performance.csv**\n* **M·ª•c ti√™u: B√†i to√†n d·ª± ƒëo√°n ch·∫•t l∆∞·ª£ng l√†m vi·ªác c·ªßa nh√¢n vi√™n**\n* **Th√†nh vi√™n nh√≥m**\n* * **1. Nguy·ªÖn Minh Quang**\n  * **2. ƒê·∫∑ng Xu√¢n Tr·ªçng**\n  * **3. Nguy·ªÖn Ph∆∞∆°ng Vi·ªát**","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:51.904528Z","iopub.execute_input":"2025-06-07T03:27:51.905187Z","iopub.status.idle":"2025-06-07T03:27:51.932359Z","shell.execute_reply.started":"2025-06-07T03:27:51.905150Z","shell.execute_reply":"2025-06-07T03:27:51.931429Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Import libraries","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.impute import KNNImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:51.933744Z","iopub.execute_input":"2025-06-07T03:27:51.934277Z","iopub.status.idle":"2025-06-07T03:27:51.939677Z","shell.execute_reply.started":"2025-06-07T03:27:51.934244Z","shell.execute_reply":"2025-06-07T03:27:51.938833Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# ƒê·ªçc file Dataset v√† t√¨m hi·ªÉu th√¥ng tin c√°c c·ªôt d·ªØ li·ªáu\n**M·ª•c ti√™u**\n* X√°c ƒë·ªãnh c·ªôt m·ª•c ti√™u\n* X√°c ƒë·ªãnh DType c·ªßa t·ª´ng c·ªôt","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/employee-performance/employee_performance.csv')\nprint('Read Dataset is sucessful!')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:51.960211Z","iopub.execute_input":"2025-06-07T03:27:51.960715Z","iopub.status.idle":"2025-06-07T03:27:51.971130Z","shell.execute_reply.started":"2025-06-07T03:27:51.960691Z","shell.execute_reply":"2025-06-07T03:27:51.970376Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"#  Th√¥ng tin c∆° b·∫£n","metadata":{}},{"cell_type":"code","source":"print(\"===== Th√¥ng tin t·ªïng quan =====\")\nprint(df.info())\nprint(df.head(10))\nprint(\"\\n===== M√¥ t·∫£ th·ªëng k√™ =====\")\nprint(df.describe(include='all'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:51.993917Z","iopub.execute_input":"2025-06-07T03:27:51.994549Z","iopub.status.idle":"2025-06-07T03:27:52.027816Z","shell.execute_reply.started":"2025-06-07T03:27:51.994525Z","shell.execute_reply":"2025-06-07T03:27:52.026899Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# üîé 1. PH√ÇN T√çCH C√ÅC C·ªòT ƒê·∫¶U V√ÄO LI√äN QUAN\n* **age:\tobject** ‚Üí s·ªë\tC√≥ ch·ª©a gi√° tr·ªã d·∫°ng ch·ªØ (‚Äúforty‚Äù, ‚Äútwenty‚Äù, ‚Äúunknown‚Äù, ‚Äú-1‚Äù, ‚Äú200‚Äù) ‚Üí c·∫ßn l√†m s·∫°ch\n* **salary:\tobject/float**\tC√≥ NaN v√† c√≥ th·ªÉ ch·ª©a gi√° tr·ªã b·∫•t th∆∞·ªùng (v√≠ d·ª•: c·ª±c l·ªõn/nh·ªè)\n* **years_at_company:\ts·ªë nguy√™n**\tC√≥ th·ªÉ ch·ª©a gi√° tr·ªã √¢m ho·∫∑c ngo·∫°i lai\n* **performance_score:\tfloat**\tBi·∫øn m·ª•c ti√™u, c√≥ NaN ‚Üí c·∫ßn x·ª≠ l√Ω n·∫øu d√πng supervised learning\n* **gender, position, department, education_level:\tdanh m·ª•c**\tC·∫ßn encode (Label/OneHot) ƒë·ªÉ s·ª≠ d·ª•ng m√¥ h√¨nh h·ªìi quy","metadata":{}},{"cell_type":"markdown","source":"# Kh·∫£o s√°t gi√° tr·ªã unique","metadata":{}},{"cell_type":"code","source":"numeric_cols = ['age', 'salary','years_at_company', 'performance_score']\n\n# 2. Th·ªëng k√™ s·ªë l∆∞·ª£ng v√† gi√° tr·ªã unique cho t·ª´ng c·ªôt\nprint(\"===== Gi√° tr·ªã unique v√† s·ªë l∆∞·ª£ng c·ªßa c√°c c·ªôt s·ªë =====\\n\")\nfor col in numeric_cols:\n    unique_vals = df[col].dropna().unique()\n    unique_vals_sorted = sorted(unique_vals)  # s·∫Øp x·∫øp ƒë·ªÉ d·ªÖ xem\n    print(f\"C·ªôt '{col}': {len(unique_vals)} gi√° tr·ªã unique\")\n    print(f\"Gi√° tr·ªã: {unique_vals_sorted}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.039865Z","iopub.execute_input":"2025-06-07T03:27:52.040577Z","iopub.status.idle":"2025-06-07T03:27:52.048975Z","shell.execute_reply.started":"2025-06-07T03:27:52.040553Z","shell.execute_reply":"2025-06-07T03:27:52.047977Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# üßΩ 2. X·ª¨ L√ù D·ªÆ LI·ªÜU\n**L√†m s·∫°ch d·ªØ li·ªáu**\n* Lo·∫°i b·ªè ho·∫∑c thay th·∫ø gi√° tr·ªã kh√¥ng h·ª£p l·ªá trong **age**\n* X·ª≠ l√Ω gi√° tr·ªã thi·∫øu (NaN)\n* * V·ªõi **salary, age, years_at_company**: thay b·∫±ng trung v·ªã ho·∫∑c d√πng m√¥ h√¨nh suy ƒëo√°n (imputation).\n  * V·ªõi **performance_score**: n·∫øu l√† bi·∫øn m·ª•c ti√™u, lo·∫°i b·ªè d√≤ng c√≥ NaN ·ªü ƒë√¢y.\n* Lo·∫°i b·ªè outliers ho·∫∑c chu·∫©n h√≥a c·ªôt s·ªë b·∫±ng MinMaxScaler ho·∫∑c StandardScaler.","metadata":{}},{"cell_type":"markdown","source":"# Chuy·ªÉn c√°c c·ªôt object ƒë√°ng l·∫Ω l√† s·ªë\n* X√°c ƒë·ªãnh c√°c c·ªôt d·∫°ng object c√≥ th·ªÉ ch·ª©a s·ªë","metadata":{}},{"cell_type":"code","source":"possible_numeric = ['age', 'salary']\n\nfor col in possible_numeric:\n    try:\n        df[col] = pd.to_numeric(df[col], errors='coerce')  # √©p ki·ªÉu, l·ªói -> NaN\n        print(f\"‚úÖ √âp ki·ªÉu th√†nh c√¥ng: {col}\")\n    except:\n        print(f\"‚ùå Kh√¥ng th·ªÉ √©p ki·ªÉu: {col}\")\n\n# 3. Ki·ªÉm tra s·ªë l∆∞·ª£ng NaN\nprint(\"\\n===== S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu (NaN) theo c·ªôt =====\")\nprint(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.050389Z","iopub.execute_input":"2025-06-07T03:27:52.050926Z","iopub.status.idle":"2025-06-07T03:27:52.069546Z","shell.execute_reply.started":"2025-06-07T03:27:52.050891Z","shell.execute_reply":"2025-06-07T03:27:52.068614Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# L√†m s·∫°ch c√°c c·ªôt s·ªë (lo·∫°i b·ªè kh√¥ng ph·∫£i s·ªë):","metadata":{}},{"cell_type":"code","source":"# Danh s√°ch c√°c c·ªôt c·∫ßn l√†m s·∫°ch\nnumeric_cols = ['age', 'salary', 'years_at_company', 'performance_score']\n\n# Duy·ªát qua t·ª´ng c·ªôt, √©p ki·ªÉu v·ªÅ s·ªë. N·∫øu l·ªói (chu·ªói, k√Ω t·ª±...) th√¨ th√†nh NaN\nfor col in numeric_cols:\n    df[col] = pd.to_numeric(df[col], errors='coerce')\n\n# # Sau ƒë√≥ lo·∫°i b·ªè to√†n b·ªô d√≤ng c√≥ NaN trong c√°c c·ªôt s·ªë ƒë√≥\n# df = df.dropna(subset=numeric_cols).reset_index(drop=True)\n\nprint(\"‚úÖ ƒê√£ lo·∫°i b·ªè t·∫•t c·∫£ gi√° tr·ªã kh√¥ng ph·∫£i l√† s·ªë trong c√°c c·ªôt:\", numeric_cols)\nprint(f\"S·ªë d√≤ng sau khi l√†m s·∫°ch: {len(df)}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.084300Z","iopub.execute_input":"2025-06-07T03:27:52.084582Z","iopub.status.idle":"2025-06-07T03:27:52.091299Z","shell.execute_reply.started":"2025-06-07T03:27:52.084561Z","shell.execute_reply":"2025-06-07T03:27:52.090515Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## ƒêi·ªÅn gi√° tr·ªã trung b√¨nh cho c√°c d√≤ng s·ªë thi·∫øu","metadata":{}},{"cell_type":"code","source":"for col in numeric_cols:\n    df[col] = df[col].fillna(df[col].mean())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.099646Z","iopub.execute_input":"2025-06-07T03:27:52.099924Z","iopub.status.idle":"2025-06-07T03:27:52.113065Z","shell.execute_reply.started":"2025-06-07T03:27:52.099901Z","shell.execute_reply":"2025-06-07T03:27:52.112163Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 5. Ki·ªÉm tra gi√° tr·ªã v√¥ c·ª±c (inf) v√† NaN ·ªü c√°c c·ªôt s·ªë\nprint(\"\\n===== Gi√° tr·ªã v√¥ c·ª±c v√† NaN trong c√°c c·ªôt s·ªë =====\")\nfor col in numeric_cols:\n    inf_count = df[col].isin([float('inf'), -float('inf')]).sum()\n    nan_count = df[col].isna().sum()\n    print(f\"C·ªôt '{col}': {inf_count} gi√° tr·ªã v√¥ c·ª±c, {nan_count} gi√° tr·ªã NaN\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.126155Z","iopub.execute_input":"2025-06-07T03:27:52.126718Z","iopub.status.idle":"2025-06-07T03:27:52.134905Z","shell.execute_reply.started":"2025-06-07T03:27:52.126695Z","shell.execute_reply":"2025-06-07T03:27:52.133959Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.157281Z","iopub.execute_input":"2025-06-07T03:27:52.158170Z","iopub.status.idle":"2025-06-07T03:27:52.173083Z","shell.execute_reply.started":"2025-06-07T03:27:52.158140Z","shell.execute_reply":"2025-06-07T03:27:52.172231Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# 6. V·∫Ω boxplot ph√°t hi·ªán outlier\nprint(\"\\nüé® ƒêang v·∫Ω bi·ªÉu ƒë·ªì boxplot...\")\n# V·∫Ω boxplot cho t·ª´ng c·ªôt\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    plt.boxplot(df[col].dropna())  # lo·∫°i b·ªè NaN ƒë·ªÉ tr√°nh l·ªói khi v·∫Ω\n    plt.title(f'Boxplot c·ªßa c·ªôt {col}')\n    plt.ylabel(col)\n    plt.grid(True)\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.174447Z","iopub.execute_input":"2025-06-07T03:27:52.174703Z","iopub.status.idle":"2025-06-07T03:27:52.757424Z","shell.execute_reply.started":"2025-06-07T03:27:52.174684Z","shell.execute_reply":"2025-06-07T03:27:52.756603Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Ki·ªÉm tra c·ªôt Cat","metadata":{}},{"cell_type":"code","source":"categorical_features = [col for col in df.select_dtypes(include=['object']).columns]\nprint(categorical_features)\nfor col in categorical_features:\n    nan_count = df[col].isna().sum()\n    print(f\"C·ªôt '{col}':  {nan_count} gi√° tr·ªã NaN\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.758910Z","iopub.execute_input":"2025-06-07T03:27:52.759255Z","iopub.status.idle":"2025-06-07T03:27:52.766889Z","shell.execute_reply.started":"2025-06-07T03:27:52.759235Z","shell.execute_reply":"2025-06-07T03:27:52.766142Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = df[~df['gender'].isin(['X', 'M', 'F', 'Alien'])]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.767932Z","iopub.execute_input":"2025-06-07T03:27:52.768509Z","iopub.status.idle":"2025-06-07T03:27:52.785085Z","shell.execute_reply.started":"2025-06-07T03:27:52.768487Z","shell.execute_reply":"2025-06-07T03:27:52.784196Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df['gender'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.786852Z","iopub.execute_input":"2025-06-07T03:27:52.787138Z","iopub.status.idle":"2025-06-07T03:27:52.805810Z","shell.execute_reply.started":"2025-06-07T03:27:52.787118Z","shell.execute_reply":"2025-06-07T03:27:52.804865Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Drop NaN\n","metadata":{}},{"cell_type":"code","source":"print(categorical_features)\ndf = df.dropna(subset=categorical_features).reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.806811Z","iopub.execute_input":"2025-06-07T03:27:52.807369Z","iopub.status.idle":"2025-06-07T03:27:52.824985Z","shell.execute_reply.started":"2025-06-07T03:27:52.807347Z","shell.execute_reply":"2025-06-07T03:27:52.824178Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.825887Z","iopub.execute_input":"2025-06-07T03:27:52.826192Z","iopub.status.idle":"2025-06-07T03:27:52.845628Z","shell.execute_reply.started":"2025-06-07T03:27:52.826162Z","shell.execute_reply":"2025-06-07T03:27:52.844715Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# üìà 3. PH√ÇN T√çCH M·ªêI LI√äN H·ªÜ V·ªöI BI·∫æN M·ª§C TI√äU\n**Ph√¢n ph·ªëi c√°c c·ªôt ƒë·∫ßu v√†o so v·ªõi performance_score**","metadata":{}},{"cell_type":"code","source":"warnings.simplefilter(action='ignore', category=FutureWarning)\nfor col in numeric_cols:\n    plt.figure(figsize=(6, 4))\n    \n    # Thay th·∫ø inf v√† -inf th√†nh NaN, sau ƒë√≥ lo·∫°i b·ªè c√°c gi√° tr·ªã NaN\n    clean_df = df[col].replace([np.inf, -np.inf], np.nan).dropna()\n    \n    sns.histplot(clean_df, kde=True)\n    \n    plt.title(f'Distribution of {col}')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:52.846616Z","iopub.execute_input":"2025-06-07T03:27:52.847124Z","iopub.status.idle":"2025-06-07T03:27:56.570340Z","shell.execute_reply.started":"2025-06-07T03:27:52.847096Z","shell.execute_reply":"2025-06-07T03:27:56.569460Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numeric_cols = ['age', 'salary', 'years_at_company']\n\nfor col in numeric_cols:\n    plt.figure(figsize=(8, 4))\n    sns.violinplot (x='performance_score', y=col, data=df)\n    plt.title(f'Ph√¢n ph·ªëi {col} theo performance_score')\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:27:56.571309Z","iopub.execute_input":"2025-06-07T03:27:56.571580Z","iopub.status.idle":"2025-06-07T03:28:07.011253Z","shell.execute_reply.started":"2025-06-07T03:27:56.571562Z","shell.execute_reply":"2025-06-07T03:28:07.010313Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for col in numeric_cols:\n    plt.figure(figsize=(8, 4))\n    sns.scatterplot(x=col, y='performance_score', data=df)\n    plt.title(f'{col} vs. Performance Score')\n    plt.tight_layout()\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:07.012098Z","iopub.execute_input":"2025-06-07T03:28:07.012317Z","iopub.status.idle":"2025-06-07T03:28:07.641173Z","shell.execute_reply.started":"2025-06-07T03:28:07.012300Z","shell.execute_reply":"2025-06-07T03:28:07.640302Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"**Corr Heatmap: ƒê√°nh gi√° t∆∞∆°ng quan**","metadata":{}},{"cell_type":"code","source":"corr_matrix = df[['age', 'salary', 'years_at_company', 'performance_score']].corr()\nsns.heatmap(corr_matrix, annot=True, cmap='coolwarm')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:07.644082Z","iopub.execute_input":"2025-06-07T03:28:07.644637Z","iopub.status.idle":"2025-06-07T03:28:07.910220Z","shell.execute_reply.started":"2025-06-07T03:28:07.644611Z","shell.execute_reply":"2025-06-07T03:28:07.909258Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numeric_cols =['age', 'salary','years_at_company', 'performance_score']\nn_rows = 2\nn_cols = 2\nfig, ax = plt.subplots(n_rows,n_cols)\nfor r in range(0,n_rows):\n    for c in range(0,n_cols):\n        i = r * n_cols + c # Index\n        ax_i = ax[r,c]\n        sns.boxplot(data=df,x=numeric_cols[i],ax=ax_i)\nplt.tight_layout()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:07.911182Z","iopub.execute_input":"2025-06-07T03:28:07.911498Z","iopub.status.idle":"2025-06-07T03:28:08.326194Z","shell.execute_reply.started":"2025-06-07T03:28:07.911472Z","shell.execute_reply":"2025-06-07T03:28:08.325310Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Chu·∫©n h√≥a d·ªØ li·ªáu","metadata":{}},{"cell_type":"code","source":"def clip_outliers(df, column):\n    q1 = df[column].quantile(0.25)\n    q3 = df[column].quantile(0.75)\n    iqr = q3 - q1\n    upper_bound = q3 + 1.5 * iqr\n    lower_bound = q1 - 1.5 * iqr\n    df[column] = df[column].clip(lower=lower_bound, upper=upper_bound)\n    return df\n\nfor col in numeric_cols:    \n    df = clip_outliers(df, col)\n    \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:08.327093Z","iopub.execute_input":"2025-06-07T03:28:08.327413Z","iopub.status.idle":"2025-06-07T03:28:08.346665Z","shell.execute_reply.started":"2025-06-07T03:28:08.327383Z","shell.execute_reply":"2025-06-07T03:28:08.345723Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numeric_cols =['age', 'salary','years_at_company', 'performance_score']\nn_rows = 2\nn_cols = 2\nfig, ax = plt.subplots(n_rows,n_cols)\nfor r in range(0,n_rows):\n    for c in range(0,n_cols):\n        i = r * n_cols + c # Index\n        ax_i = ax[r,c]\n        sns.boxplot(data=df,x=numeric_cols[i],ax=ax_i)\nplt.tight_layout()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:08.347676Z","iopub.execute_input":"2025-06-07T03:28:08.348149Z","iopub.status.idle":"2025-06-07T03:28:08.745569Z","shell.execute_reply.started":"2025-06-07T03:28:08.348113Z","shell.execute_reply":"2025-06-07T03:28:08.744660Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()\ndf.describe(include='all')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:08.746465Z","iopub.execute_input":"2025-06-07T03:28:08.746813Z","iopub.status.idle":"2025-06-07T03:28:08.781713Z","shell.execute_reply.started":"2025-06-07T03:28:08.746793Z","shell.execute_reply":"2025-06-07T03:28:08.780858Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler, RobustScaler, OneHotEncoder,PowerTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\n# ƒê·ªãnh nghƒ©a c√°c c·ªôt\nnumeric_cols = ['age', 'years_at_company', 'performance_score', 'salary']\ncategorical_features = ['gender', 'department', 'position', 'education_level']\n\n# T·∫°o transformer cho t·ª´ng lo·∫°i\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', PowerTransformer(method='yeo-johnson'), numeric_cols),\n        ('cat', OneHotEncoder(drop='first', sparse_output=False), categorical_features)\n    ])\n\n# T·∫°o pipeline\npipeline = Pipeline(steps=[('preprocessor', preprocessor)])\n\n# Fit v√† transform\ndf_transformed = pipeline.fit_transform(df)\n\n# L·∫•y t√™n c·ªôt sau bi·∫øn ƒë·ªïi\nencoded_cat_cols = pipeline.named_steps['preprocessor'] \\\n    .named_transformers_['cat'] \\\n    .get_feature_names_out(categorical_features)\n\nall_columns = list(numeric_cols) + list(encoded_cat_cols)\n\n# T·∫°o DataFrame k·∫øt qu·∫£\ndf_transformed = pd.DataFrame(df_transformed, columns=all_columns, index=df.index)\n\n# Xem th·ª≠ k·∫øt qu·∫£\nprint(df_transformed.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-07T03:28:08.782495Z","iopub.execute_input":"2025-06-07T03:28:08.782722Z","iopub.status.idle":"2025-06-07T03:28:08.819401Z","shell.execute_reply.started":"2025-06-07T03:28:08.782703Z","shell.execute_reply":"2025-06-07T03:28:08.818558Z"}},"outputs":[],"execution_count":null}]}